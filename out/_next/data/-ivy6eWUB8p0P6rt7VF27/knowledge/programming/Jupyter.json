{"pageProps":{"htmlString":"<h2 id=\"description\">Description</h2>\n<p>Useful commands for programming within Jupyter Notebook.</p>\n<h2 id=\"data-preparation\">Data Preparation</h2>\n<h3 id=\"useful-imports\">Useful imports</h3>\n<p>Data sorting, visualisation, basic statistics and line fitting.</p>\n<pre><code class=\"language-python\">import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport matplotlib.ticker as mticker\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nfrom scipy.optimize import curve_fit\nfrom scipy import stats\nfrom datetime import datetime\n</code></pre>\n<h3 id=\"create-dataframe-pandas\">Create dataframe (pandas)</h3>\n<p>Using <code>.csv</code> files.</p>\n<pre><code class=\"language-python\">dataframe = pd.read_csv(&quot;filename.csv&quot;) # Basic loading\ndataframe = pd.read_csv(&quot;filename.csv&quot;).dropna() # Remove null values\ndataframe = pd.read_csv(&quot;filename.csv&quot;, delimiter=&#39;;&#39;) # Define seperator\n</code></pre>\n<p>Using <code>.xlsx</code> files.</p>\n<pre><code class=\"language-python\">dataframe = pd.read_excel(&quot;filename.csv&quot;) # Basic loading\ndataframe = pd.read_csv(&quot;filename.csv&quot;, sheet_name=&quot;name&quot;) # Define sheet name\n</code></pre>\n<h2 id=\"working-with-dates\">Working with Dates</h2>\n<h3 id=\"converting\">Converting</h3>\n<p>Convert pandas dataframe column values to datetime.</p>\n<pre><code class=\"language-python\">dataFrame[&quot;timestamps&quot;] = pd.to_datetime(dataFrame[&quot;timestamps&quot;])\n</code></pre>\n<p>Alternative for array data.</p>\n<pre><code class=\"language-python\">dfTimeStamps = [datetime.strptime(time, &quot;%Y-%m-%d %H:%M:%S&quot;) for time in dataFrame[&quot;timestamps&quot;]]\n# Replace formatted string with your time stamp structure\n</code></pre>\n<h3 id=\"indexing\">Indexing</h3>\n<p>Get dataframe values between particular dates.</p>\n<pre><code class=\"language-python\">range = dataFrame[dataFrame[&quot;timestamps&quot;].between(&quot;DD-MM-YYYY HH:MM:SS&quot;, &quot;DD-MM-YYYY HH:MM:SS&quot;)]\n</code></pre>\n<h3 id=\"aligning\">Aligning</h3>\n<p>Align date times from two separate dataframes. Useful for analysing data from separate sources.</p>\n<pre><code class=\"language-python\"># May have to remove minute and second values if they don&#39;t match\ndf1[&quot;matching_column_name&quot;] = df1[&quot;matching_column_name&quot;].apply(lambda t: t.replace(minute=0, second=0))\ndf2[&quot;matching_column_name&quot;] = df2[&quot;matching_column_name&quot;].apply(lambda t: t.replace(minute=0, second=0))\n\nmergedDataFrame = pd.merge_asof(df1, df2, on=&quot;matching_column_name&quot;) # This will drop any values that don&#39;t match\n</code></pre>\n<h2 id=\"plotting-data\">Plotting Data</h2>\n<h3 id=\"subplots\">Subplots</h3>\n<pre><code class=\"language-python\">fig, ax = plt.subplots(1, 1, figsize=(8,8)) # Single column\nfig, (ax, ax1) = plt.subplots(1, 2, figsize=(8, 8)) # Single column multiple plots\nfig, [[ax, ax1], [ax2, ax3]] = plt.suplots(2, 2) # Multi-row multi-column \n</code></pre>\n<h3 id=\"basic-settings\">Basic Settings</h3>\n<pre><code class=\"language-python\">ax.set_ylabel(&quot;LABEL&quot;)\nax.set_xlabel(&quot;LABEL&quot;)\nax.grid(color=&quot;lightgrey&quot;)\nax.set_ylim(lower, upper)\nax.set_xlim(lower, upper)\nax.legend(loc=&quot;upper right&quot;)\n</code></pre>\n<h3 id=\"dates\">Dates</h3>\n<pre><code class=\"language-python\">ax.set_xlim([datetime.date(YYYY, MM, DD), datetime.date(YYYY, MM, DD)])\nax.xaxis.set_major_locator(mdates.DayLocator(interval=n))\nax.xaxis.set_major_locator(mdates.MonthLocator(interval=n))\nplt.setp(ax.get_xticklabels(), rotation=30, ha=&quot;right, rotation_mode=&quot;anchor&quot;)\n</code></pre>\n<h3 id=\"text-and-arrows\">Text and Arrows</h3>\n<pre><code class=\"language-python\">ax.text(0.05, 0.95, &quot;TEXT&quot;, transform=ax.transAxes, fontsize=16, va=&#39;top&#39;)\nax.annotate(&#39;TEXT&#39;, xy=(0, 0), xytext=(0, 0),\n            arrowprops=dict(facecolor=&#39;black&#39;, shrink=0.05))\n</code></pre>\n<h3 id=\"exporting-and-displaying\">Exporting and Displaying</h3>\n<pre><code class=\"language-python\">plt.tight_layout() # Use this or bbox_inches\nplt.savefig(&quot;name.png&quot;, dpi=300, bbox_inches=&#39;tight&#39;)\nplt.show()\n</code></pre>\n","data":{"title":"Data Analysis with Jupyter Notebooks"}},"__N_SSG":true}