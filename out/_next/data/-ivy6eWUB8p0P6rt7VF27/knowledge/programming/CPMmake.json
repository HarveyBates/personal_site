{"pageProps":{"htmlString":"<h2 id=\"description\">Description</h2>\n<p>Adds dependencies to current machine upon building CMake for the first time. For example, if a specific dependency is needed for the current project, it will be downloaded before compiling your C++ application. This module also allows for linking of said dependency if it is downloaded successfully.</p>\n<h2 id=\"installation\">Installation</h2>\n<p>Main Site: <a href=\"https://github.com/cpm-cmake/CPM.cmake\">CPM-Make GitHub</a></p>\n<h3 id=\"manual-install\">Manual Install</h3>\n<p>To install navigate to this <a href=\"https://github.com/cpm-cmake/CPM.cmake/releases\">link</a> and download the latest release.    </p>\n<p>Add CPM.camke to the location where CMakeLists.txt file is located.</p>\n<h3 id=\"automatic-download-with-cmake\">Automatic download (with CMake)</h3>\n<p>CPM-Make can be downloaded directly by CMake. To do this you need to add the following code snippet to the start of your CMakeLists.txt file.</p>\n<pre><code class=\"language-cmake\">set(CPM_DOWNLOAD_VERSION 0.28.4)\n# Set download version to latest release before executing \n\nif(CPM_SOURCE_CACHE)\n    set(CPM_DOWNLOAD_LOCATION &quot;${CPM_SOURCE_CACHE}/cpm/CPM_${CPM_DOWNLOAD_VERSION}.cmake&quot;)\nelseif(DEFINED ENV{CPM_SOURCE_CACHE})\n    set(CPM_DOWNLOAD_LOCATION &quot;$ENV{CPM_SOURCE_CACHE}/cpm/CPM_${CPM_DOWNLOAD_VERSION}.cmake&quot;)\nelse()\n    set(CPM_DOWNLOAD_LOCATION &quot;${CMAKE_BINARY_DIR}/cmake/CPM_${CPM_DOWNLOAD_VERSION}.cmake&quot;)\nendif()\n\nif(NOT (EXISTS ${CPM_DOWNLOAD_LOCATION}))\n    message(STATUS &quot;Downloading CPM.cmake to ${CPM_DOWNLOAD_LOCATION}&quot;)\n    file(DOWNLOAD\n            https://github.com/TheLartians/CPM.cmake/releases/download/v${CPM_DOWNLOAD_VERSION}/CPM.cmake\n            ${CPM_DOWNLOAD_LOCATION}\n        )\nendif()\n\ninclude(${CPM_DOWNLOAD_LOCATION})\n</code></pre>\n<h2 id=\"add-a-package\">Add a Package</h2>\n<p>Add a package to your C++ project. I am not sure if the list of packages is limited to those listed in on this page. Perhaps other packages can be installed this way with the right configuration.</p>\n<pre><code class=\"language-cmake\">CPMAddPackage(\n        NAME # The unique name of the dependency (should be the exported target&#39;s name)\n        VERSION    # The minimum version of the dependency (optional, defaults to 0)\n        OPTIONS    # Configuration options passed to the dependency (optional)\n        DOWNLOAD_ONLY # If set, the project is downloaded, but not configured (optional)\n        [...]         # Origin parameters forwarded to FetchContent_Declare, see below\n        )\n</code></pre>\n<h2 id=\"link-a-library\">Link a Library</h2>\n<p>Once downloaded and added it needs to be linked to your C++ project.</p>\n<pre><code class=\"language-cmake\">if(*library_name*_ADDED)\n    add_library(*library_name* INTERFACE)\n    include_directories(${*library_source_dir}/include}\n    target_include_directories(${PROJECT_NAME} INTERFACE ${*library_source_dir}/include)\n    target_link_libraries{${PROJECT_NAME} *library_name*}\nendif()\n</code></pre>\n","data":{"title":"CPM-Make"}},"__N_SSG":true}