{"pageProps":{"htmlString":"<h2 id=\"description\">Description</h2>\n<p>JSON formatted data is a great asset for sending and receiving formatted information. In C++ the nlohmann library provides an easy way to create and display JSON formatted data.</p>\n<p>Documentation: <a href=\"https://github.com/nlohmann/json\">https://github.com/nlohmann/json</a></p>\n<h2 id=\"installation\">Installation</h2>\n<p>Homebrew (MacOS &amp; Linux)</p>\n<pre><code class=\"language-bash\">brew install nlohmann-json\n</code></pre>\n<h2 id=\"linking\">Linking</h2>\n<p>Link with CMakeLists.txt (CMake):</p>\n<pre><code class=\"language-cmake\">find_package(nlohmann_json 3.2.0 REQUIRED)\ntarget_link_libraries(foo PRIVATE nlohmann_json::nlohmann_json)\n</code></pre>\n<h3 id=\"cpm-make-package-manager\">CPM-Make (Package manager):</h3>\n<p>Check in releases for the latest version.</p>\n<p>You will need the URL specific to that release version and the SHA256 key.</p>\n<p>Only get the include folder as we don&#39;t want to download all the test examples.</p>\n<pre><code class=\"language-cmake\">CPMAddPackage(\n    NAME nlohmann_json\n    VERSION 3.9.0\n    # Just get the latest (3.9.0) version, and only the include folder as the rep is big\n    URL https://github.com/nlohmann/json/releases/download/v3.9.0/include.zip\n    URL_HASH SHA256=5b9b819aed31626aefe2eace23498cafafc1691890556cd36d2a8002f6905009\n)\n</code></pre>\n<h2 id=\"usage\">Usage</h2>\n<h3 id=\"initialisation\">Initialisation</h3>\n<pre><code class=\"language-cpp\">#include &quot;nlohmann/json.hpp&quot;\nusing json = nlohmann::json;\n</code></pre>\n<h3 id=\"construct-json-class\">Construct JSON Class</h3>\n<pre><code class=\"language-cpp\">json j;\n</code></pre>\n<h3 id=\"add-values\">Add values</h3>\n<pre><code class=\"language-cpp\">j[&quot;value_name&quot;] = &quot;value&quot;; // Single value\nj[&quot;value_name1&quot;][&quot;value_name2&quot;] = &quot;value&quot;; // Nested value\n</code></pre>\n<h3 id=\"convert-string-to-json-object\">Convert string to JSON object</h3>\n<pre><code class=\"language-cpp\">std::string input = &quot;{&quot;happy&quot;:true,&quot;pi&quot;:3.141}&quot;;\nj = input;\nstd::cout &lt;&lt; j.dump(4) &lt;&lt; std::endl;\n</code></pre>\n<h3 id=\"print-formatted-json-object\">Print formatted JSON object</h3>\n<pre><code class=\"language-cpp\">int n = 4;\n// n represents an int for the number of spaces to indent\nstd::cout &lt;&lt; j.dump(n) &lt;&lt; std::endl;\n</code></pre>\n<h3 id=\"example-output\">Example output</h3>\n<pre><code class=\"language-json\">{\n    &quot;value_name&quot;: &quot;value&quot;, \n    &quot;value_name1&quot; {\n        &quot;value_name2&quot;: &quot;value&quot;\n    }\n}\n</code></pre>\n","data":{"title":"Using JSON with C++"}},"__N_SSG":true}