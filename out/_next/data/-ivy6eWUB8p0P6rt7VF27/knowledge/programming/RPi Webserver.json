{"pageProps":{"htmlString":"<h2 id=\"description\">Description</h2>\n<p>Information for setting up a secure (https) webserver using a raspberry pi, nginx, certbot and a DNS provider. Based on a tutoiral from Luke Smith; however, in this version, a Raspberry Pi was used to host the site instead of a cloud service provider such as Amazon. Other good resources include this video from Fireship, which talks about the deployment of a website on a Raspberry Pi.</p>\n<h2 id=\"proxy-server-nginx\">Proxy Server (nginx)</h2>\n<ul>\n<li>Reverse proxy server (TCP/UDP)</li>\n<li>Documentation: <a href=\"https://nginx.org/en/\">nginx</a></li>\n<li>Tutorial: <a href=\"https://pimylifeup.com/raspberry-pi-nginx/\">PiMyLifeUp</a></li>\n</ul>\n<h3 id=\"installation\">Installation</h3>\n<pre><code class=\"language-bash\">sudo apt-get remove apache2 # Ensure apache2 in not installed\nsudo apt-get install nginx # Install\n</code></pre>\n<h3 id=\"setup\">Setup</h3>\n<p>Copy the default nginx configuration to a new configuration:</p>\n<pre><code class=\"language-bash\">cp /etc/nginx/sites-available/default /etc/nginx/sites-available/your_site_name # Replace your_site_name\n</code></pre>\n<p>Edit the newly created file (/etc/nginx/sites-available/your_site_name) to display the following</p>\n<pre><code class=\"language-bash\">server {\n    listen 80;\n    listen [::]:80 ;\n\n    root /var/www/*website_file_dir*;\n\n    index index.html index.htm index.nginx-debian.html;\n    \n    server_name *your_website_address*;\n\n    location / {\n        if ($request_uri ~ ^/(.*)\\.html) {\n            return 302 /$1;\n        }\n        try_files $uri $uri.html $uri/ =404;\n    }\n</code></pre>\n<p>The code in the location scope allow html files to be indexed without a .html extension in the websites URL.</p>\n<p>Put newley created configuration into enabled sites directory:</p>\n<pre><code class=\"language-bash\">ln -s /etc/nginx/sites-available/your_site_name /etc/nginx/sites-enabled/\n</code></pre>\n<p>Make directory that holds website files (index.html etc.):</p>\n<pre><code class=\"language-bash\">mkdir /var/www/your_site_name\ncd /var/www/your_site_name\ntouch index.html # Create and edit mainpage as needed\n</code></pre>\n<h3 id=\"nginx-commands\">nginx Commands</h3>\n<pre><code class=\"language-bash\">sudo systemctl start nginx # Start server\nsudo systemctl status nginx # Server status\nsudo systemctl stop nginx # Stop server\nsudo systemctl restart nginx # Reboot server\nsudo killall nginx # Stop all processes\n</code></pre>\n<h2 id=\"https-certificate-certbot\">HTTPS Certificate (certbot)</h2>\n<p>Gives your website a certificate of security that browsers can recognise and thus wont show that the site is insecure.</p>\n<h3 id=\"installation-1\">Installation</h3>\n<pre><code class=\"language-bash\">sudo apt-get install certbo python-certbot-nginx\n</code></pre>\n<h3 id=\"setup-1\">Setup</h3>\n<pre><code class=\"language-bash\">sudo certbot --nginx\n</code></pre>\n<p>Follow the following commands:</p>\n<ol>\n<li>Enter email</li>\n<li>Agree to terms of service</li>\n<li>Don&#39;t share email</li>\n<li>Select https addresses</li>\n<li>Redirect http to https</li>\n</ol>\n<p>Note that certbot certificates expire every six months. To renew:</p>\n<pre><code class=\"language-bash\">sudo certbot renew # Renew certificate\n</code></pre>\n<h2 id=\"port-forwarding\">Port Forwarding</h2>\n<p>You need to setup port forwarding on your router in order for users outside your local network to access your site.</p>\n<pre><code class=\"language-bash\">ip route # Find router address\n</code></pre>\n<p>Type the router address into a browser, navigate to port forwarding and add:</p>\n<ul>\n<li>Protocol: TCP</li>\n<li>WAN port: 80</li>\n<li>LAN port: 80</li>\n<li>Destination IP address: local_ip_address</li>\n</ul>\n<p>You may also need to set (port 80 for http and 443 for https):</p>\n<ul>\n<li>Protocol: TCP</li>\n<li>WAN port: 443</li>\n<li>LAN port: 443</li>\n<li>Destination IP address: local_ip_address</li>\n</ul>\n<h2 id=\"other-useful-commands\">Other Useful Commands</h2>\n<pre><code class=\"language-bash\">hostname -I # Get local IP address\ncurl icanhazip.com # Get public IPv6 address\ncurl ipv4.icanhazip.com # Get public IPv4 address\n</code></pre>\n","data":{"title":"Raspberry Pi Web-Server"}},"__N_SSG":true}